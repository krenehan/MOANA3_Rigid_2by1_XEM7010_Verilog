
// time scale
`timescale 1ns/1ps

// no undeclared nets
//`default_nettype none

module DigitalCore_ClkCycleDelay(
        
        //---------------------------------------------------------------------------
        //  ports
        //---------------------------------------------------------------------------
        rst,
        clk,
        in,
        out
        //---------------------------------------------------------------------------        

    );
    parameter Width = 1;
	parameter DelayCycles = 2;

    //-----------------------------------------------------------------------------------
    //   I/O Wires
    //-----------------------------------------------------------------------------------
    input wire                                  rst;
    input wire                                  clk;
    input wire  [Width-1:0]                     in;
    output wire [Width-1:0]                     out;

	
    //-----------------------------------------------------------------------------------
    //  Genvars
    //-----------------------------------------------------------------------------------
    genvar i;
    //-----------------------------------------------------------------------------------
	
    //-----------------------------------------------------------------------------------
    //   Wires
    //-----------------------------------------------------------------------------------
    reg [Width-1:0] delayed_signal [0:DelayCycles];

    //-----------------------------------------------------------------------------------

    //-----------------------------------------------------------------------------------
    //   Assigns
    //-----------------------------------------------------------------------------------
    assign out = delayed_signal[DelayCycles];

    //-----------------------------------------------------------------------------------

    //-----------------------------------------------------------------------------------
    //    Flops
    //-----------------------------------------------------------------------------------
    always @(*) begin
        delayed_signal[0] <= in;
    end

    generate for (i = 1; i <= DelayCycles; i = i + 1) begin: delay_cycle_gen
        always @(posedge clk or posedge rst) begin
            if (rst) begin
                delayed_signal[i] <= {Width{1'b0}};
            end else begin
                delayed_signal[i] <= delayed_signal[i-1];
            end
        end
    end endgenerate

endmodule

